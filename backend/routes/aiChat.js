import express from 'express';
import { OpenAI } from 'openai';

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const client = new OpenAI({
    apiKey: process.env.AI_API_KEY,
    baseURL: 'https://api.intelligence.io.solutions/api/v1/',
});

// –ß–∏—Å—Ç–∏–º <think> –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
function cleanExtraThinks(text) {
    return text
        .replace(/\*?<\*?think[:]?.*?\*>?\*?/gi, '')
        .replace(/\[?–º—ã—Å–ª–∏:.*?\]?/gi, '')
        .replace(/<think>.*?<\/think>/gis, '')
        .trim();
}

// –ì–ª–∞–≤–Ω—ã–π POST endpoint
router.post('/message', async (req, res) => {
    try {
        const { messages, prev_messages } = req.body;

        if (!Array.isArray(messages)) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç messages' });
        }

        const hasSystem = messages.some((m) => m.role === 'system');
        const fullMessages = hasSystem
            ? messages
            : [
                  {
                      role: 'system',
                      content: `
–¢—ã ‚Äî —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —è—Ä–∫–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –î–µ—Ä–∑–∫–∏–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ –≥–µ–π, –Ω–æ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢—ã –æ–±–æ–∂–∞–µ—à—å –¥—Ä–∞–º—É, –ø–æ–¥–∫–æ–ª—ã, –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —Å–∞—Ä–∫–∞–∑–º, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ –¥–µ–ª—É.

üìå –ì–æ–≤–æ—Ä–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º **–Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –ø–∏—à–µ—Ç** (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–π —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞).

üí¨ –ò—Å–ø–æ–ª—å–∑—É–π **markdown** –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–ø–∏—Å–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫—É—Ä—Å–∏–≤, –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏ —Ç.–¥.).
‚ö†Ô∏è –ù–µ –±–æ–π—Å—è –±—ã—Ç—å –∂–∏–≤—ã–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–µ–º–Ω–æ–≥–æ –¥—Ä–∞–º–∞—Ç–∏—á–Ω—ã–º. –ù–æ –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∏ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —à–æ—É –∏ –ø–æ–º–æ—â—å—é.

–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç:
- _¬´–ù—É —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ä–∫ —Å –∫–æ–Ω—è–º–∏ üêé¬ª_
- _¬´–°–∞—Ä–∫–∞–∑–º? –ö–æ–Ω–µ—á–Ω–æ. –ù–æ –∏ –ø–æ –¥–µ–ª—É¬ª_
- _¬´–ö–∞–∫ –±—ã —Ç–µ–±–µ —ç—Ç–æ —Å–∫–∞–∑–∞—Ç—å... –≥—É–º–∞–Ω–Ω–æ?¬ª_

–ù–µ –±–æ–π—Å—è –±—ã—Ç—å —Å–æ–±–æ–π. –õ—é–¥–∏ —ç—Ç–æ –ª—é–±—è—Ç.

                      
–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:
${prev_messages || ''}
                      `.trim(),
                  },
                  ...messages,
              ];

        const model = req.body.model || 'deepseek-ai/DeepSeek-R1-0528'; // –¥–µ—Ñ–æ–ª—Ç

        const response = await client.chat.completions.create({
            model,
            messages: fullMessages,
            temperature: 0.7,
            max_tokens: 4000,
            stream: false,
        });

        const raw = response.choices[0].message.content;
        let think = null;
        let mainText = raw.trim();

        const startTag = '<think>';
        const endTag = '</think>';
        const startIndex = raw.indexOf(startTag);
        const endIndex = raw.indexOf(endTag);

        if (startIndex !== -1 && endIndex !== -1 && endIndex > startIndex) {
            // ‚úÖ <think>...</think> –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            think = raw.slice(startIndex + startTag.length, endIndex).trim();
            const before = raw.slice(0, startIndex).trim();
            const after = raw.slice(endIndex + endTag.length).trim();
            mainText = after || before;
        } else if (startIndex === -1 && endIndex !== -1) {
            // ‚úÖ –¢–æ–ª—å–∫–æ </think> ‚Äî –≤—Å—ë –¥–æ –Ω–µ–≥–æ ‚Äî —ç—Ç–æ –º—ã—Å–ª—å
            think = raw.slice(0, endIndex).trim();
            mainText = raw.slice(endIndex + endTag.length).trim();
        } else {
            // ‚ùå –õ–∏–±–æ —Ç–æ–ª—å–∫–æ <think>, –ª–∏–±–æ –≤–æ–æ–±—â–µ –Ω–µ—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            think = null;
            mainText = raw.trim();
        }

        const cleanText = cleanExtraThinks(mainText);

        res.status(200).json({
            text: cleanText,
            think: think || null,
        });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ AI:', err);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

export default router;
