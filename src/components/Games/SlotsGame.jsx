import React, { useState } from "react";

const symbols = ["üçí", "‚≠ê", "üçã", "üíé", "üçâ", "üîî", "7Ô∏è‚É£"]; // –°–∏–º–≤–æ–ª—ã –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤

const SlotsGame = () => {
  const [slots, setSlots] = useState([
    ["‚ùì", "‚ùì", "‚ùì"],
    ["‚ùì", "‚ùì", "‚ùì"],
    ["‚ùì", "‚ùì", "‚ùì"],
  ]); // –°–∏–º–≤–æ–ª—ã –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö
  const [isSpinning, setIsSpinning] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
  const [balance, setBalance] = useState(5000); // –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
  const [bet, setBet] = useState(100); // –°—Ç–∞–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
  const [message, setMessage] = useState(""); // –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞
  const getRandomSymbol = () => symbols[Math.floor(Math.random() * symbols.length)];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å"
  const handleSpin = () => {
    if (balance < bet) {
      setMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!");
      return;
    }

    setMessage(""); // –°–±—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è
    setIsSpinning(true); // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
    setBalance((prev) => prev - bet); // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å

    const newSlots = [
      [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()],
      [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()],
      [getRandomSymbol(), getRandomSymbol(), getRandomSymbol()],
    ];

    let stopDelays = [1000, 2000, 3000]; // –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤
    stopDelays.forEach((delay, index) => {
      setTimeout(() => {
        setSlots((prevSlots) => {
          const updatedSlots = [...prevSlots];
          updatedSlots[index] = newSlots[index]; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
          return updatedSlots;
        });

        if (index === 2) {
          setTimeout(() => {
            setIsSpinning(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
            checkWin(newSlots); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          }, 500);
        }
      }, delay);
    });
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
  const checkWin = (newSlots) => {
    if (
      newSlots[0][1] === newSlots[1][1] &&
      newSlots[1][1] === newSlots[2][1]
    ) {
      const winAmount = bet * 10; // –í—ã–∏–≥—Ä—ã—à 10x –æ—Ç —Å—Ç–∞–≤–∫–∏
      setBalance((prev) => prev + winAmount);
      setMessage(`üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} –º–æ–Ω–µ—Ç! üéâ`);
    } else {
      setMessage("üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen  text-center text-white">
      <h1 className="text-6xl font-extrabold mb-6 text-yellow-400 drop-shadow-lg">
        üé∞ –°–ª–æ—Ç—ã
      </h1>
      <p className="text-lg text-gray-300 mb-4">–ö—Ä—É—Ç–∏ –±–∞—Ä–∞–±–∞–Ω—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É–ø–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç!</p>

      {/* –ë–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞–≤–∫–∞ */}
      <div className="flex items-center justify-center space-x-8 mb-8">
        <div className="text-2xl">
          –ë–∞–ª–∞–Ω—Å: <span className="text-green-400 font-bold">{balance} –º–æ–Ω–µ—Ç</span>
        </div>
        <div className="text-2xl">
          –°—Ç–∞–≤–∫–∞:{" "}
          <input
            type="number"
            value={bet}
            min="1"
            max={balance}
            onChange={(e) => setBet(parseInt(e.target.value))}
            className="bg-gray-800 text-white text-center w-24 py-1 rounded-md shadow-inner"
          />
        </div>
      </div>

      {/* –ë–∞—Ä–∞–±–∞–Ω—ã */}
      <div className="flex space-x-6 mb-8">
        {slots.map((reel, reelIndex) => (
          <div
            key={reelIndex}
            className="w-28 h-36 bg-gradient-to-b from-yellow-400 to-red-600 text-5xl flex flex-col items-center justify-center rounded-lg shadow-xl border-2 border-yellow-300 overflow-hidden"
          >
            {/* –°–∏–º–≤–æ–ª—ã –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–µ */}
            {reel.map((symbol, symbolIndex) => (
              <div
                key={symbolIndex}
                className={`flex items-center justify-center w-full h-12 transition-transform duration-200 ${
                  isSpinning ? "animate-bounce" : ""
                }`}
              >
                {symbol}
              </div>
            ))}
          </div>
        ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ "–ö—Ä—É—Ç–∏—Ç—å" */}
      <button
        className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-500 hover:to-blue-600 text-white text-2xl font-bold py-3 px-8 rounded-full transition-all disabled:opacity-50"
        onClick={handleSpin}
        disabled={isSpinning || balance < bet} // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞
      >
        {isSpinning ? "–ö—Ä—É—Ç–∏—Ç—Å—è..." : "–ö—Ä—É—Ç–∏—Ç—å"}
      </button>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
      {message && (
        <p className="text-2xl font-bold mt-8 text-yellow-400 animate-bounce">
          {message}
        </p>
      )}
    </div>
  );
};

export default SlotsGame;
