import React, { useState } from "react";

const symbols = ["üçí", "‚≠ê", "üçã", "üíé", "üçâ", "üîî", "7Ô∏è‚É£"]; // –°–∏–º–≤–æ–ª—ã –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–æ–≤

const SlotsGame = () => {
  const [slots, setSlots] = useState([
    [...symbols], // –ü–µ—Ä–≤—ã–π –±–∞—Ä–∞–±–∞–Ω
    [...symbols], // –í—Ç–æ—Ä–æ–π –±–∞—Ä–∞–±–∞–Ω
    [...symbols], // –¢—Ä–µ—Ç–∏–π –±–∞—Ä–∞–±–∞–Ω
  ]);
  const [isSpinning, setIsSpinning] = useState(false);
  const [balance, setBalance] = useState(5000);
  const [bet, setBet] = useState(100);
  const [message, setMessage] = useState("");

  const [reelPositions, setReelPositions] = useState([0, 0, 0]); // –ü–æ–∑–∏—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å"
  const handleSpin = () => {
    if (balance < bet) {
      setMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!");
      return;
    }

    setMessage("");
    setIsSpinning(true);
    setBalance((prev) => prev - bet);

    const newPositions = [
      Math.floor(Math.random() * symbols.length), // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      Math.floor(Math.random() * symbols.length), // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      Math.floor(Math.random() * symbols.length), // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
    ];

    const spinIntervals = [];
    slots.forEach((_, index) => {
      spinIntervals[index] = setInterval(() => {
        setReelPositions((prevPositions) => {
          const updatedPositions = [...prevPositions];
          updatedPositions[index] =
            (prevPositions[index] - 1 + symbols.length) % symbols.length; // –°–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö
          return updatedPositions;
        });
      }, 100); // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ, —Å—Ä–µ–¥–Ω—é—é –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ, –±–æ–ª—å—à—É—é –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
    const stopDelays = [
      Math.floor(1000 + Math.random() * 1000), // 1000‚Äì1500 –º—Å
      Math.floor(2000 + Math.random() * 500), // 1500‚Äì2000 –º—Å
      Math.floor(2500 + Math.random() * 500), // 2000‚Äì2500 –º—Å
    ];

    stopDelays.forEach((delay, index) => {
      setTimeout(() => {
        clearInterval(spinIntervals[index]); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–∞
        setReelPositions((prevPositions) => {
          const updatedPositions = [...prevPositions];
          updatedPositions[index] = newPositions[index]; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
          return updatedPositions;
        });

        if (index === slots.length - 1) {
          setTimeout(() => {
            setIsSpinning(false);
            checkWin(newPositions);
          }, 500);
        }
      }, delay);
    });
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
  const checkWin = (finalPositions) => {
    const middleSymbols = finalPositions.map(
      (pos, index) => symbols[(pos + 1) % symbols.length]
    ); // –°–∏–º–≤–æ–ª—ã –≤ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏

    if (middleSymbols.every((symbol, _, arr) => symbol === arr[0])) {
      const winAmount = bet * 10; // –í—ã–∏–≥—Ä—ã—à 10x –æ—Ç —Å—Ç–∞–≤–∫–∏
      setBalance((prev) => prev + winAmount);
      setMessage(`üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} –º–æ–Ω–µ—Ç! üéâ`);
    } else {
      setMessage("üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
    }
  };

  return (
    <div className="flex flex-col items-center justify-center h-full text-center text-white">
      <h1 className="text-6xl font-extrabold mb-6 text-yellow-400 drop-shadow-lg">
        üé∞ –°–ª–æ—Ç—ã
      </h1>
      <p className="text-lg text-gray-300 mb-4">–ö—Ä—É—Ç–∏ –±–∞—Ä–∞–±–∞–Ω—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É–ø–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç!</p>

      {/* –ë–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞–≤–∫–∞ */}
      <div className="flex items-center justify-center space-x-8 mb-8">
        <div className="text-2xl">
          –ë–∞–ª–∞–Ω—Å: <span className="text-green-400 font-bold">{balance} –º–æ–Ω–µ—Ç</span>
        </div>
        <div className="text-2xl">
          –°—Ç–∞–≤–∫–∞:{" "}
          <input
            type="number"
            value={bet}
            min="1"
            max={balance}
            onChange={(e) => setBet(parseInt(e.target.value))}
            className="bg-gray-800 text-white text-center w-24 py-1 rounded-md shadow-inner"
          />
        </div>
      </div>

      {/* –ë–∞—Ä–∞–±–∞–Ω—ã */}
      <div className="flex space-x-6 mb-8">
        {slots.map((reel, reelIndex) => (
          <div
            key={reelIndex}
            className="w-28 h-48 bg-gray-700  text-5xl flex flex-col items-center justify-center rounded-lg shadow-xl border-2 overflow-hidden"
          >
            {Array(3)
              .fill(0)
              .map((_, i) => {
                // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Å–∏–º–≤–æ–ª
                const symbolIndex =
                  (reelPositions[reelIndex] + i) % symbols.length;
                return (
                  <div
                    key={i}
                    className={`flex items-center justify-center w-full h-24`}
                  >
                    {symbols[symbolIndex]}
                  </div>
                );
              })}
          </div>
        ))}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ "–ö—Ä—É—Ç–∏—Ç—å" */}
      <button
        className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-500 hover:to-blue-600 text-white text-2xl font-bold py-3 px-8 rounded-full transition-all disabled:opacity-50"
        onClick={handleSpin}
        disabled={isSpinning || balance < bet}
      >
        {isSpinning ? "–ö—Ä—É—Ç–∏—Ç—Å—è..." : "–ö—Ä—É—Ç–∏—Ç—å"}
      </button>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
      {message && (
        <p className="text-2xl font-bold mt-8 text-yellow-400 animate-bounce">
          {message}
        </p>
      )}
    </div>
  );
};

export default SlotsGame;
